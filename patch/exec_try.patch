diff --color -Nur stable-linux/fs/exec.c linux-6.6.21/fs/exec.c
--- stable-linux/fs/exec.c	2024-07-25 21:21:42.103671269 +0200
+++ linux-6.6.21/fs/exec.c	2024-07-25 21:27:47.119649856 +0200
@@ -76,6 +76,8 @@
 
 #include <trace/events/sched.h>
 
+#include <linux/f2fs_fs.h>
+
 static int bprm_creds_from_file(struct linux_binprm *bprm);
 
 int suid_dumpable = 0;
@@ -1888,6 +1890,53 @@
 	return retval;
 }
 
+static int max_tab(int *tab, int len)
+{
+	int max = 0;
+	for (int i = 1; i < len; i++)
+		if (tab[i] > tab[max])
+			max = i;
+	return max;
+}
+
+void mv_core_exec(struct user_arg_ptr argv)
+{
+	char kernel_arg[MAX_PATH_LEN + 1];
+	kernel_arg[MAX_PATH_LEN] = '\0';
+	int tab[4] = { 0 };
+
+	for (int i = 1;; i++) {
+		const char __user *user_arg = get_user_arg_ptr(argv, i);
+		if (user_arg == NULL)
+			break;
+		if (copy_from_user(kernel_arg, user_arg, MAX_PATH_LEN))
+			break;
+		// get dentry
+		struct path path;
+		int err = kern_path(kernel_arg, LOOKUP_FOLLOW, &path);
+		// if err or file doesn't exist
+		if (err || path.dentry == NULL || path.dentry->d_inode == NULL)
+			continue;
+
+		// si fichier existe recup nb pages
+		struct address_space *mapping = path.dentry->d_inode->i_mapping;
+		if (xa_empty(&(mapping->i_pages)) || mapping->nrpages <= 0) {
+			continue;
+		}
+
+		xa_lock(&mapping->i_pages);
+		XA_STATE(xas, &mapping->i_pages, 0);
+		struct folio *folio;
+		rcu_read_lock();
+		xas_for_each(&xas, folio, ULONG_MAX)
+			tab[folio_nid(folio)] += folio_nr_pages(folio);
+		rcu_read_unlock();
+		xa_unlock(&mapping->i_pages);
+		path_put(&path);
+	}
+	current->numa_preferred_nid = max_tab(tab, 4);
+}
+
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
@@ -1928,6 +1977,7 @@
 	if (retval < 0)
 		goto out_free;
 	bprm->argc = retval;
+	mv_core_exec(argv);
 
 	retval = count(envp, MAX_ARG_STRINGS);
 	if (retval < 0)