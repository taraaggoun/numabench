diff --color -Nur linux-6.5.7try/fs/Makefile linux-6.5.7/fs/Makefile
--- linux-6.5.7try/fs/Makefile	2024-06-21 11:32:33.698064102 +0200
+++ linux-6.5.7/fs/Makefile	2024-06-21 11:31:00.863828871 +0200
@@ -7,7 +7,7 @@
 # 
 
 
-obj-y :=	opti_open.o open.o read_write.o file_table.o super.o \
+obj-y :=	open.o read_write.o file_table.o super.o \
 		char_dev.o stat.o exec.o pipe.o namei.o fcntl.o \
 		ioctl.o readdir.o select.o dcache.o inode.o \
 		attr.o bad_inode.o file.o filesystems.o namespace.o \
diff --color -Nur linux-6.5.7try/fs/open.c linux-6.5.7/fs/open.c
--- linux-6.5.7try/fs/open.c	2024-06-21 11:32:33.699064125 +0200
+++ linux-6.5.7/fs/open.c	2024-06-21 11:31:00.869829023 +0200
@@ -1388,10 +1388,6 @@
 }
 EXPORT_SYMBOL(file_open_root);
 
-#define OPEN_PIDS_LEN 1000
-pid_t open_pids[OPEN_PIDS_LEN] = {0};
-EXPORT_SYMBOL_GPL(open_pids);
-
 static long do_sys_openat2(int dfd, const char __user *filename,
 			   struct open_how *how)
 {
@@ -1417,15 +1413,6 @@
 		}
 	}
 	putname(tmp);
-	// Check if we want to do the optimization on the pid
-	for (int i = 0; i < OPEN_PIDS_LEN; i++) {
-		if (open_pids[i] == 0)
-			break;
-		if (current->pid == open_pids[i]) {
-			mv_core();
-			break;
-		}
-	}
 	return fd;
 }
 
diff --color -Nur linux-6.5.7try/fs/opti_open.c linux-6.5.7/fs/opti_open.c
--- linux-6.5.7try/fs/opti_open.c	2024-06-21 11:33:42.476586069 +0200
+++ linux-6.5.7/fs/opti_open.c	1970-01-01 01:00:00.000000000 +0100
@@ -1,102 +0,0 @@
-#include <linux/mm.h>
-#include <linux/fdtable.h>
-#include <linux/rcupdate.h>
-
-/**
- * Get fdtable for current process
-*/
-static struct fdtable* get_fdtable(void)
-{
-	// Get process's files struct
-	struct files_struct *files = current->files;
-	if (!files) {
-		pr_err("Failed to get files_struct\n");
-		return NULL;
-	}
-
-	// Get process's fd table
-	struct fdtable *fdt;
-	rcu_read_lock();
-	fdt = files_fdtable(files);
-	rcu_read_unlock();
-
-	if (!fdt) {
-		pr_err("fd table NULL\n");
-		return NULL;
-	}
-	return fdt;
-}
-
-/**
- * Retur the index of the max of the array
-*/
-static int max_tab(int *tab, int len) {
-	int max = 0;
-	for (int i = 1; i < len; i++) {
-		if (tab[i] > tab[max])
-			max = i;
-	}
-	return (tab[max] == 0) ? -1 : max;
-}
-
-/**
- * Add in the array all the pages in the index of the node where they are mapped
-*/
-static void get_core_fd(struct fdtable *fdt, int fd, int *tab, int len)
-{
-	struct file *file = NULL;
-	file = fdt->fd[fd];
-	if (file == NULL)
-		return;
-
-	struct inode *inode = file->f_inode;
-	if (inode == NULL)
-		return;
-	struct address_space *mapping = inode->i_mapping;
-	if (xa_empty(&(mapping->i_pages)) || mapping->nrpages <= 0)
-		return;
-
-	xa_lock(&mapping->i_pages);
-	XA_STATE(xas, &mapping->i_pages, 0);
-
-	// Go throught all folio
-	struct folio *folio;
-	xas_for_each(&xas, folio, ULONG_MAX) {
-		// Add the number of pages in tab
-		tab[folio_nid(folio)] += folio_nr_pages(folio);
-	}
-	xa_unlock(&mapping->i_pages);
-}
-
-/**
- * Get the core where we affect the thread
-*/
-static int get_core_pid(int *tab, int len)
-{
-	struct fdtable *fdt = get_fdtable();
-	if (fdt == NULL) {
-		pr_info("fdtable NULL\n");
-		return -1;
-	}
-	for (int i = 3; i < fdt->max_fds; i++) {
-		get_core_fd(fdt, i, tab, len);
-	}
-	return max_tab(tab, len);
-}
-
-/**
- * Force the thread to go to the core with the most pages mapped
-*/
-void mv_core(void)
-{
-	int tab[4] = { 0 };
-	int node_id = get_core_pid(tab, 4);
-	if (node_id == -1) {
-		pr_info("node_id = -1\n");
-		return;
-	}
-
-	// propose to the scheduler to go on node id
-	pr_info(" Try to go to core : %d\n", node_id);
-	current->numa_preferred_nid = node_id;
-}
diff --color -Nur linux-6.5.7try/include/linux/mm.h linux-6.5.7/include/linux/mm.h
--- linux-6.5.7try/include/linux/mm.h	2024-06-21 11:32:33.700064148 +0200
+++ linux-6.5.7/include/linux/mm.h	2024-06-21 11:31:01.293839754 +0200
@@ -3922,5 +3922,4 @@
 
 #endif
 
-void mv_core(void);
 #endif /* _LINUX_MM_H */